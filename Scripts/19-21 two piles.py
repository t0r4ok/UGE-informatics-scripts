"""
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может убрать из одной из куч один камень или уменьшить количество камней в куче в два раза (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).

Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.

В начальный момент в первой куче было 10 камней, во второй куче  — S камней, S > 10.

Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока  — значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.

Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение S, когда такая ситуация возможна.
"""

from functools import lru_cache

WINAMOUNT = 63

def moves(s):
    a, b = s
    return (a - 1, b), (a, b - 1), (a / 2, b), (a, b / 2) # варианты действий


@lru_cache(None)
def game(s):
    a, b = s
    
    if s >= WINAMOUNT: return "W"
    if any(game(m) == "W" for m in moves(s)): return "P1"
    if all(game(m) == "P1" for m in moves(s)): return "V1"
    if any(game(m) == "V1" for m in moves(s)): return "P2"
    if all(game(m) == "P1" or game(m) == "P2" for m in moves(s)): return "V2"
    
    
for i in range(1, 500):
    if game(i) == "V1":
        print(i, game(i))
        
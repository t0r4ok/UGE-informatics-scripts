"""
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня либо увеличить количество камней в куче в пять раз. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 63.

Победителем считается игрок, сделавший последний ход, т. е. первым получивший кучу, в которой будет 63 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 62.

Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока  — значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т. е. не являющиеся выигрышными независимо от игры противника.

Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда такая ситуация возможна.
"""

from functools import lru_cache

WINAMOUNT = 63

def moves(s):
    return s + 1, s + 4, s * 5 # варианты действий


@lru_cache(None)
def game(s):
    if s >= WINAMOUNT: return "W"
    if any(game(m) == "W" for m in moves(s)): return "P1"
    if all(game(m) == "P1" for m in moves(s)): return "V1"
    if any(game(m) == "V1" for m in moves(s)): return "P2"
    if all(game(m) == "P1" or game(m) == "P2" for m in moves(s)): return "V2"
    
    
for i in range(1, 500):
    if game(i) == "V1":
        print(i, game(i))
        